/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class nl_mpi_jmmf_JMMFPlayer */

#ifndef _Included_nl_mpi_jmmf_JMMFPlayer
#define _Included_nl_mpi_jmmf_JMMFPlayer
#ifdef __cplusplus
extern "C" {
#endif
#undef nl_mpi_jmmf_JMMFPlayer_MS_TO_REF_TIME
#define nl_mpi_jmmf_JMMFPlayer_MS_TO_REF_TIME 10000L
#undef nl_mpi_jmmf_JMMFPlayer_STATE_STOP
#define nl_mpi_jmmf_JMMFPlayer_STATE_STOP 0L
#undef nl_mpi_jmmf_JMMFPlayer_STATE_PAUSE
#define nl_mpi_jmmf_JMMFPlayer_STATE_PAUSE 1L
#undef nl_mpi_jmmf_JMMFPlayer_STATE_RUN
#define nl_mpi_jmmf_JMMFPlayer_STATE_RUN 2L
/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    initPlayer
 * Signature: (Z)J
 */
JNIEXPORT jlong JNICALL Java_nl_mpi_jmmf_JMMFPlayer_initPlayer
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    start
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_start
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    stop
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_stop
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    pause
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_pause
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    isPlaying
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_nl_mpi_jmmf_JMMFPlayer_isPlaying
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getState
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getState
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setRate
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setRate
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getRate
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getRate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setVolume
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setVolume
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getVolume
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getVolume
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setMediaTime
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setMediaTime
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getMediaTime
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getMediaTime
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getDuration
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getDuration
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getFrameRate
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getFrameRate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getTimePerFrame
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getTimePerFrame
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getAspectRatio
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getAspectRatio
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getOriginalSize
 * Signature: (J)Ljava/awt/Dimension;
 */
JNIEXPORT jobject JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getOriginalSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setVisualComponent
 * Signature: (JLjava/awt/Component;)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setVisualComponent
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setVisible
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setVisible
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setVideoSourcePos
 * Signature: (JFFFF)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setVideoSourcePos
  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat, jfloat);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setVideoDestinationPos
 * Signature: (JIIII)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setVideoDestinationPos
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setVideoSourceAndDestPos
 * Signature: (JFFFFIIII)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setVideoSourceAndDestPos
  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat, jfloat, jint, jint, jint, jint);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getVideoDestinationPos
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getVideoDestinationPos
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    initWithFile
 * Signature: (Ljava/lang/String;Z)J
 */
JNIEXPORT jlong JNICALL Java_nl_mpi_jmmf_JMMFPlayer_initWithFile
  (JNIEnv *, jobject, jstring, jboolean);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getFileType
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getFileType
  (JNIEnv *, jobject, jstring);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    isVisualMedia
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_nl_mpi_jmmf_JMMFPlayer_isVisualMedia
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    setStopTime
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_setStopTime
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getStopTime
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getStopTime
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getSourceHeight
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getSourceHeight
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getSourceWidth
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getSourceWidth
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getPreferredAspectRatio
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getPreferredAspectRatio
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getCurrentImage
 * Signature: (JLnl/mpi/jmmf/DIBInfoHeader;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getCurrentImage
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    getImageAtTime
 * Signature: (JLnl/mpi/jmmf/DIBInfoHeader;J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_nl_mpi_jmmf_JMMFPlayer_getImageAtTime
  (JNIEnv *, jobject, jlong, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    repaintVideo
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_repaintVideo
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    enableDebugMode
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_enableDebugMode
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    correctAtPause
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_correctAtPause
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    clean
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_clean
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    closeSession
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_closeSession
  (JNIEnv *, jobject, jlong);

/*
 * Class:     nl_mpi_jmmf_JMMFPlayer
 * Method:    deletePlayer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_nl_mpi_jmmf_JMMFPlayer_deletePlayer
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
