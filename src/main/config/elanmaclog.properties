############################################################
#  	Custom Logging Configuration File
#
# You can use a configuration file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.

# Default ConsoleHandler
# handlers= java.util.logging.ConsoleHandler
# Default FileHandler
# handlers= java.util.logging.FileHandler
handlers=mpi.eudico.util.ErrOutLogFileHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overridden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
#.level= INFO

# Specific logging level for particular classes.
# nl.mpi.lexan.analyzers.parseanalyzer.ParseAnalyzer.level = FINE
# or you can specify just a prefix of the class name.
# nl.mpi.lexan.level = FINE
# Although, many classes simply use this logger:
# mpi.eudico.client.annotator.util.ClientLogger.level = FINEST

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
# java.util.logging.FileHandler.pattern = %h/java%u.log
# java.util.logging.FileHandler.limit = 50000
# java.util.logging.FileHandler.count = 1
# java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.append = false

# Limit the message that are printed on the console to INFO and above.
# java.util.logging.ConsoleHandler.level = INFO
# Or, print all messages that are printed on the console.
# java.util.logging.ConsoleHandler.level = ALL
# java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

mpi.eudico.util.ErrOutLogFileHandler.pattern = %h/Library/Preferences/ELAN/elan%u.log
mpi.eudico.util.ErrOutLogFileHandler.formatter = java.util.logging.SimpleFormatter

